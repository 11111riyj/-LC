##图论基础 

#图论思想
**key**
1、类似于二叉树遍历 不断地遍历
2、图储存方式分为两种
  · 邻接表
  · 邻接矩阵
  下图为示例
  https://labuladong.github.io/algo/images/%e5%9b%be/2.jpeg
3、度的概念
  · 入度
  · 出度
  
  
#<LC 797>
给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序）

 graph[i] 是一个从节点 i 可以访问的所有节点的列表（即从节点 i 到节点 graph[i][j]存在一条有向边）。

示例：
输入：graph = [[1,2],[3],[3],[]]
输出：[[0,1,3],[0,2,3]]
解释：有两条路径 0 -> 1 -> 3 和 0 -> 2 -> 3

代码：

class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        path = []  #存储路径
        res = []   #存储结果
        n = len(graph)    #总共需遍历图的个数
        def travel_graph(graph,s,path):
            path.append(s)
            if s == n-1:  #每次遍历的终止条件
                res.append(path[:])
            for i in graph[s]: #做选择
                travel_graph(graph,i,path) #可以return 但该图没有闭环 所以不用担心无限循环的情况
            path.pop()  #撤销
        travel_graph(graph,0,path)
        return res
        
