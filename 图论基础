##图论基础 

#图论思想
**key**
1、类似于二叉树遍历 不断地遍历
2、图储存方式分为两种
  · 邻接表
  · 邻接矩阵
  下图为示例
  https://labuladong.github.io/algo/images/%e5%9b%be/2.jpeg
3、度的概念
  · 入度
  · 出度
  
  
#<LC 797>
给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序）

 graph[i] 是一个从节点 i 可以访问的所有节点的列表（即从节点 i 到节点 graph[i][j]存在一条有向边）。

示例：
输入：graph = [[1,2],[3],[3],[]]
输出：[[0,1,3],[0,2,3]]
解释：有两条路径 0 -> 1 -> 3 和 0 -> 2 -> 3

代码：

class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        path = []  #存储路径
        res = []   #存储结果
        n = len(graph)    #总共需遍历图的个数
        def travel_graph(graph,s,path):
            path.append(s)
            if s == n-1:  #每次遍历的终止条件
                res.append(path[:])
            for i in graph[s]: #做选择
                travel_graph(graph,i,path) #可以return 但该图没有闭环 所以不用担心无限循环的情况
            path.pop()  #撤销
        travel_graph(graph,0,path)
        return res
        
        
##二分图
 #二分图概念
 二分图在图的基础上，对图的每个点染色，要求相连的每个点颜色不一样
 二分图用法示例：
  显然，如果用哈希表存储，需要两个哈希表分别存储「每个演员到电影列表」的映射和「每部电影到演员列表」的映射。
  但如果用「图」结构存储，将电影和参演的演员连接，很自然地就成为了一幅二分图
 #二分图思路
 说白了就是遍历一遍图，一边遍历一边染色，看看能不能用两种颜色给所有节点染色，且相邻节点的颜色都不相同。
 一般用DPS或者BFS
 
#例子 判断二分图
存在一个无向图 ，图中有 n 个节点。其中每个节点都有一个介于 0 到 n - 1 之间的唯一编号。给你一个二维数组 graph ，
其中 graph[u] 是一个节点数组，由节点 u 的邻接节点组成。形式上，对于 graph[u] 中的每个 v ，都存在一条位于节点 u 和节点 v 之间的无向边。该无向图同时具有以下属性：
不存在自环（graph[u] 不包含 u）。
不存在平行边（graph[u] 不包含重复值）。
如果 v 在 graph[u] 内，那么 u 也应该在 graph[v] 内（该图是无向图）
这个图可能不是连通图，也就是说两个节点 u 和 v 之间可能不存在一条连通彼此的路径。
二分图 定义：如果能将一个图的节点集合分割成两个独立的子集 A 和 B ，并使图中的每一条边的两个节点一个来自 A 集合，一个来自 B 集合，就将这个图称为 二分图 。

如果图是二分图，返回 true ；否则，返回 false 。

示例：输入：graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
输出：false
解释：不能将节点分割成两个独立的子集，以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。


**思路**
图的思想就是小列表+列表索引 列表索引表示某个图的位置 列表索引所在位置的小列表则是表示某个图与之相关联的图
所以 关键在于如何把小列表和列表索引分开
不管是BFS还是DFS 都将列表索引和小列表分开

DFS代码：

class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        self.ans = True
        color = [False for i in range(n)] #上色列表
        visited = [False for i in range(n)] #访问情况
        def bt(graph,v): #DFS 框架 每层遍历 v为列表索引
            if self.ans == False:
                return  
            visited[v] = True
            for i in graph[v]: #小列表遍历
                if visited[i] == False: #如果未遍历 该点颜色未改变
                    color[i] = ~color[v] #赋予与该出发节点颜色不同的颜色
                    bt(graph,i) 递归
                else:
                    if color[i] == color[v]: 
                        self.ans = False
        for i in range(n):
            if visited[i] == False:
                bt(graph,i)
        return self.ans
BFS代码：
import collections
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        self.ans = True
        visited = [False for i in range(n)]
        color = [False for i in range(n)]
        def bfs(graph,start): #start 列表索引
            queue = collections.deque()
            queue.append(start)
            visited[start] = True
            while len(queue) != 0 and self.ans:
                cur = queue.popleft()
                for i in graph[cur]: #小列表遍历
                    if visited[i]==False:
                        color[i] = ~color[cur]
                        visited[i] = True
                        queue.append(i) #增加队列
                    else:
                        if color[i] == color[cur]:
                            self.ans = False
        for i in range(n):
            if ~visited[i]:
                bfs(graph,i)
        return self.ans

 
        
