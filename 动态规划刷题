# LC 1143

**题目要求**
给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。

一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可
以不删除任何字符）后组成的新字符串。

例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。
两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。

**思路**
创建一个二维dp 维度为len(text1)+1 * len(text2)+1  dp[i][j]的意思是text1[0：i-1] text[0：j-1]最长公共子序列长度
**为什么要+1** 因为在dp内添加一行一列表示 当text1[0] 和text2[0]的情况 也就是dp[i][j] i j 中有一个为0的情况 

***动态规划的重中之重——状态转移方程*** 
由于dp中行列都被添加一行 所有当dp[i][j] 时记录的其实是text1[0：i-1] text[0：j-1]的最长公共子序列长度
此时有个思路转移 设置最长公共子序列为LCS = 'xxx'  若text1[i-1] == text[j-1]时（也就是子数组的最后一个数相等时） text1[i-1] 一定在LCS中 此时dp[i][j] = dp[i-1][j-1] + 1 更新最长子序列的长度
反之 则text1[i-1]、text[j-1]至少有一个不再LCS中 当前位置的长度为之前长度的最大值 
**举个栗子**
有text1 = ‘abcf’ text2=‘acde’
当i = 3 j = 2 此时子数组为 子数组1 = ‘ab’  子数组2 = ‘a’ dp[2][1] = 1 text1[i] = ‘c’ text2[j] = 'c'  判断相等 dp[3][2] = dp[2][1] + 1 =2
此时 子数租变化 子数组1 = ‘abc’  子数组2 = ‘ac’ dp[3][2] = 2  i = 4  j = 3 text1[i[ = ‘f’ text2[j] = ‘e’ 不相等 dp[i][j] = max(dp[3][3],dp[4][2])  返回时 返回dp[-1][-1]


代码如下

    `class Solution:
        def longestCommonSubsequence(self, text1: str, text2: str) -> int:
            n = len(text1)
            m = len(text2)
            dp = [[0]*(m+1) for i in range(n+1)]
            for i in range(1,n+1):
                for j in range(1,m+1):
                    if text1[i-1] == text2[j-1]:
                        dp[i][j] = dp[i-1][j-1] + 1
                    else:
                        dp[i][j] = max(dp[i][j-1],dp[i-1][j])
            return dp[-1][-1]`

![6bb61116e6ff774cb97b3bd02677a36](https://user-images.githubusercontent.com/51037569/161278919-1bd633ff-1ee0-447e-92af-74ca0cfe6f12.png)


# 关于动态规划的两种形式
# dp数组
**当思路卡壳时可以换一个思路**
如LC https://leetcode-cn.com/problems/minimum-path-sum/#:~:text=%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95-,64.%20%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C,-%E9%9A%BE%E5%BA%A6
题目要求：给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

 **最直接的思路** #自下而上
从[0,0]位置开始走，计算[0,1],[1,0]到右下角的距离谁比较短，最后在+grid[0,0]即可。
代码如下
 `class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m,n = len(grid),len(grid[0])
        memo = [[-1]*n for _ in range(m)]
        def dp(grid,i,j):
            #base case memo[0][0] = grid[0][0] 已经下下列代码中体现
            if i == m or j == n:
                return float('INF')
            if i == m-1 and j == n - 1:
                return grid[i][j]
            if memo[i][j] != -1:
                return memo[i][j]
            res = min(dp(grid,i,j+1),dp(grid,i+1,j))+grid[i][j]
            memo[i][j] = res
            return memo[i][j]
        return dp(grid,0,0)  `
# 换一种思路 自上而下
**思路**
从右下角开始往回走 也比较简单 大致就是递归从右下角找最近距离
1、base case if i == 0 and j == 0:return grid[0][0]
2、动态方程 dp[i][j] = min(dp[i][j-1],dp[i-1][j])+grid[i][j]
代码如下：
`
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m,n = len(grid),len(grid[0])
        memo = [[-1]*n for _ in range(m)]
        def dp(grid,i,j):
            if i < 0 or j < 0:
                return float('INF')
            if i == 0 and j == 0:
                return grid[0][0]
            if memo[i][j] != -1:
                return memo[i][j]
            memo[i][j] = min(dp(grid,i,j-1),dp(grid,i-1,j))+grid[i][j] #动态方程
            return memo[i][j]
        return dp(grid,m-1,n-1)
            `
            
## Q 为什么dp数组要设置m行n列
**reason**
因为会溢出边界 比如在自底向上会方位到dp[m,n] 此时为溢出边界 所以设置 dp[m,x] or dp[x,n] or dp[m,n] = float('INF')
自上向下的会出现 dp[-1,-1]的情况 与上述情况类似



